name: scrape-and-index

on:
  workflow_dispatch:
    inputs:
      extract_since:
        description: "EXTRACT_SINCE (YYYY-MM-DD, blank = all)"
        required: false
        default: ""
      extract_until:
        description: "EXTRACT_UNTIL (YYYY-MM-DD, blank = latest)"
        required: false
        default: ""
      process_order:
        description: "Process order"
        required: false
        type: choice
        options: [oldest, newest]
        default: oldest
      extract_max_files:
        description: "Max files to extract this run (0 = none)"
        required: false
        default: "250"
      skip_crawl:
        description: "Reuse existing sources_index.csv without crawling"
        required: false
        default: "true"
      seed_only:
        description: "When crawling, only hit seed pages"
        required: false
        default: "true"
      stop_after_found:
        description: "Crawler: stop after N links found (0 = unlimited)"
        required: false
        default: "0"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python -m pip install --upgrade certifi
          sudo apt-get update
          sudo apt-get install -y tesseract-ocr

      - name: Show inputs
        run: |
          echo "extract_since=${{ inputs.extract_since }}"
          echo "extract_until=${{ inputs.extract_until }}"
          echo "process_order=${{ inputs.process_order }}"
          echo "extract_max_files=${{ inputs.extract_max_files }}"
          echo "skip_crawl=${{ inputs.skip_crawl }}"
          echo "seed_only=${{ inputs.seed_only }}"
          echo "stop_after_found=${{ inputs.stop_after_found }}"

      - name: Crawl + index (build sources_index.csv)
        if: ${{ inputs.skip_crawl != 'true' }}
        env:
          PYTHONUNBUFFERED: "1"
          TBC_VERIFY_SSL: "false"
          SEED_ONLY: "${{ inputs.seed_only || 'true' }}"
          MAX_PAGES: "2000"
          PRINT_EVERY: "25"
          STOP_AFTER_FOUND: "${{ inputs.stop_after_found || '0' }}"
        run: |
          python -u tbc_scraper.py

      - name: Extract populations (OCR/PDF parsing)
        env:
          PYTHONUNBUFFERED: "1"
          TBC_VERIFY_SSL: "false"
          EXTRACT_SINCE: "${{ inputs.extract_since || '' }}"
          EXTRACT_UNTIL: "${{ inputs.extract_until || '' }}"
          EXTRACT_MAX_FILES: "${{ inputs.extract_max_files || '250' }}"
          PROCESS_ORDER: "${{ inputs.process_order || 'oldest' }}"
          RESUME_MODE: "true"
          OCR_DPI: "200"
        run: python -u tbc_extract.py

      - name: Build README table
        run: python -u make_readme.py

      - name: Commit outputs
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add data/derived/*.csv README.md || true
          git commit -m "update: scrape/extract + README" || echo "no changes"
          git push || echo "no push (likely a PR workflow)"
