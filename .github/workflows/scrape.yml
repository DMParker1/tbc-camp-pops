name: scrape-and-index

on:
  workflow_dispatch:
    inputs:
      extract_since:
        description: "EXTRACT_SINCE (YYYY-MM-DD, blank = all)"
        required: false
        default: ""
      extract_until:
        description: "EXTRACT_UNTIL (YYYY-MM-DD, blank = latest)"
        required: false
        default: ""
      process_order:
        description: "Process order"
        required: false
        type: choice
        options: [oldest, newest]
        default: oldest
      extract_max_files:
        description: "Max files to extract this run (0 = none)"
        required: false
        default: "250"
      skip_crawl:
        description: "Reuse existing sources_index.csv without crawling"
        required: false
        default: "true"
      seed_only:
        description: "When crawling, only hit seed pages"
        required: false
        default: "true"
      stop_after_found:
        description: "Crawler: stop after N links found (0 = unlimited)"
        required: false
        default: "0"
      # New optional crawler controls
      scrape_since:
        description: "SCRAPE_SINCE (YYYY-MM-DD, default 1992-01-01)"
        required: false
        default: "1992-01-01"
      scrape_until:
        description: "SCRAPE_UNTIL (YYYY-MM-DD, blank = today)"
        required: false
        default: ""
      reliefweb_fallback:
        description: "Use ReliefWeb fallback when TBC URL not found"
        required: false
        type: choice
        options: [true, false]
        default: true
      max_pages:
        description: "Archive crawl page budget"
        required: false
        default: "2000"
      print_every:
        description: "Archive crawl progress cadence"
        required: false
        default: "25"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python -m pip install --upgrade certifi
          sudo apt-get update
          sudo apt-get install -y tesseract-ocr

      - name: Show inputs
        run: |
          echo "extract_since=${{ inputs.extract_since }}"
          echo "extract_until=${{ inputs.extract_until }}"
          echo "process_order=${{ inputs.process_order }}"
          echo "extract_max_files=${{ inputs.extract_max_files }}"
          echo "skip_crawl=${{ inputs.skip_crawl }}"
          echo "seed_only=${{ inputs.seed_only }}"
          echo "stop_after_found=${{ inputs.stop_after_found }}"
          echo "scrape_since=${{ inputs.scrape_since }}"
          echo "scrape_until=${{ inputs.scrape_until }}"
          echo "reliefweb_fallback=${{ inputs.reliefweb_fallback }}"
          echo "max_pages=${{ inputs.max_pages }}"
          echo "print_every=${{ inputs.print_every }}"

      - name: Crawl + index (build sources_index.csv)
        env:
          PYTHONUNBUFFERED: "1"
          TBC_VERIFY_SSL: "false"
          SKIP_CRAWL: "${{ inputs.skip_crawl || 'true' }}"   
          SEED_ONLY: "${{ inputs.seed_only || 'true' }}"
          MAX_PAGES: "${{ inputs.max_pages || '2000' }}"
          PRINT_EVERY: "${{ inputs.print_every || '25' }}"
          STOP_AFTER_FOUND: ${{ inputs.stop_after_found != '0' }}
          PROCESS_ORDER: "${{ inputs.process_order || 'oldest' }}"
          SCRAPE_SINCE: "${{ inputs.scrape_since || '1992-01-01' }}"
          SCRAPE_UNTIL: "${{ inputs.scrape_until || '' }}"
          RELIEFWEB_FALLBACK: "${{ inputs.reliefweb_fallback || 'true' }}"
        run: |
          python -u tbc_scraper.py

      - name: Extract populations (OCR/PDF parsing)
        env:
          PYTHONUNBUFFERED: "1"
          TBC_VERIFY_SSL: "false"
          EXTRACT_SINCE: "${{ inputs.extract_since || '' }}"
          EXTRACT_UNTIL: "${{ inputs.extract_until || '' }}"
          EXTRACT_MAX_FILES: "${{ inputs.extract_max_files || '250' }}"
          PROCESS_ORDER: "${{ inputs.process_order || 'oldest' }}"
          RESUME_MODE: "true"
          OCR_DPI: "200"
          OCR_PSM: "6"
        run: |
          python -u tbc_extract.py

      - name: Build README table
        run: |
          python -u make_readme.py

      - name: Update README inputs cheatsheet
        run: |
          mkdir -p .github
          cat > .github/inputs_cheatsheet.md <<'EOF'
          ### Workflow inputs (quick reference)
          - extract_since: YYYY-MM-DD (lower bound for extraction, inclusive)
          - extract_until: YYYY-MM-DD (upper bound for extraction, inclusive)
          - extract_max_files: integer (0 = skip extract; still build README)
          - process_order: oldest|newest (applies to both crawler candidate months and extractor order)
          - skip_crawl: true|false (true = reuse existing sources_index.csv)
          - seed_only: true|false (crawler: only hit seed pages / search pages)
          - stop_after_found: 0|1 (crawler: stop after first OK candidate per month; 0 = keep probing)
          - scrape_since: YYYY-MM-DD (candidate generator lower bound; default 1992-01-01)
          - scrape_until: YYYY-MM-DD (candidate generator upper bound; blank = today)
          - reliefweb_fallback: true|false (use ReliefWeb API if TBC URL is missing)
          - max_pages: integer (archive crawl page budget)
          - print_every: integer (archive crawl progress cadence)

          **Notes:**
          - Preferred wide = TBC/TBBC over UNHCR when both exist for a month.
          - Dual wide (`tbc_camp_population_wide_dual.csv`) retains both series for QA.
          - Optional lineage file `data/reference/camp_lineage.csv` can narrow camp matching by active date ranges.
          EOF

          # Insert or replace the block between markers
          if grep -q "<!-- WORKFLOW_INPUTS_START -->" README.md; then
            awk 'BEGIN{p=1} /<!-- WORKFLOW_INPUTS_START -->/{print; system("cat .github/inputs_cheatsheet.md"); p=0; next} /<!-- WORKFLOW_INPUTS_END -->/{print; p=1; next} p{print}' README.md > README.new
            mv README.new README.md
          else
            {
              echo ''
              echo '<!-- WORKFLOW_INPUTS_START -->'
              cat .github/inputs_cheatsheet.md
              echo '<!-- WORKFLOW_INPUTS_END -->'
            } >> README.md
          fi

      - name: Commit outputs
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add data/derived/*.csv README.md || true
          git commit -m "update: scrape/extract + README inputs cheatsheet" || echo "no changes"
          git push || echo "no push (likely a PR workflow)"
